;; NFT collection smart contract

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";

;; NFT collection smart contract v2
;; + return collection balance (op = 5)
;; + support mint nft with next_item_id (op = 2 + int flag after query_id)

(slice, int, cell, cell, cell, int, int) load_data() inline {
    var ds = get_data().begin_parse();
    var owner = ds~load_msg_addr();
    var next_id = ds~load_uint(64);
    var anycraft_public_key = ds~load_uint(256);
    var fee = ds~load_coins();
    return
    (owner, ;; owner_address
        next_id, ;; next_item_index
        ds~load_ref(), ;; content
        ds~load_ref(), ;; nft_item_code
        ds~load_ref(),  ;; royalty_params
        anycraft_public_key,
        fee
    );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, int anycraft_public_key, int fee) impure inline {
    set_data(begin_cell()
        .store_slice(owner_address)
        .store_uint(next_item_index, 64)
        .store_uint(anycraft_public_key, 256)
        .store_coins(fee)
        .store_ref(content)
        .store_ref(nft_item_code)
        .store_ref(royalty_params)
        .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell()
        .store_uint(item_index, 64)
        .store_slice(my_address())
        .end_cell();
    return begin_cell()
        .store_uint(0, 2)
        .store_dict(nft_item_code)
        .store_dict(data)
        .store_uint(0, 1)
        .end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
        .store_int(wc, 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(nft_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(nft_content);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    var msg = begin_cell()
        .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
        .store_slice(to_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::report_royalty_params(), 32)
        .store_uint(query_id, 64)
        .store_slice(data);
    send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() send_message_nobounce(int amount, slice to, cell body) impure inline_ref {
    cell msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(1, 107)
        .store_ref(body)
        .end_cell();
    send_raw_message(msg, 2 + 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, royalty_params, anycraft_public_key, fee) = load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }

    if (op == 1) { ;; deploy new nft
        var signature = in_msg_body~load_bits(512);
        var in_msg = in_msg_body~load_ref();

        var mint_cs = in_msg.begin_parse();
        throw_unless(35, check_signature(slice_hash(mint_cs), signature, anycraft_public_key));
        throw_unless(46, msg_value >= fee);

        int item_index = mint_cs~load_uint(64);
        var amount = mint_cs~load_coins();

        throw_unless(48, msg_value - fee >= amount);

        throw_unless(402, item_index <= next_item_index);
        var is_last = item_index == next_item_index;
        deploy_nft_item(item_index, nft_item_code, amount, mint_cs~load_ref());
        if (is_last) {
            next_item_index += 1;
            save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, anycraft_public_key, fee);
        }

        send_message_nobounce(fee, owner_address, begin_cell().end_cell());

        return ();
    }

    throw_unless(401, equal_slices(sender_address, owner_address));

    if (op == 2) {
        ;; batch deploy of new nfts
        int counter = 0;
        cell deploy_list = in_msg_body~load_ref();
        int use_next_item_index = 0;
        if (in_msg_body.slice_data_empty?() == false) {
            use_next_item_index = in_msg_body~load_int(2);
        }
        do {
            var (item_index, item, f?) = deploy_list~udict::delete_get_min(64);
            if ((use_next_item_index == true) | (use_next_item_index == 1)) {
                item_index = next_item_index;
            }
            if (f?) {
                counter += 1;
                if (counter >= 250) {
                    ;; Limit due to limits of action list size
                    throw(399);
                }

                throw_unless(403 + counter, item_index <= next_item_index);
                deploy_nft_item(item_index, nft_item_code, item~load_coins(), item~load_ref());
                if (item_index == next_item_index) {
                    next_item_index += 1;
                }
            }
        } until (~ f?);
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, anycraft_public_key, fee);
        return ();
    }
    if (op == 3) {
        ;; change owner
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, content, nft_item_code, royalty_params, anycraft_public_key, fee);
        return ();
    }
    if (op == 4) {
        ;; change content
        save_data(owner_address, next_item_index, in_msg_body~load_ref(), nft_item_code, in_msg_body~load_ref(), anycraft_public_key, fee);
        return ();
    }
    if (op == 5) {
        ;; return collection balance
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op, 32)
            .store_uint(query_id, 64);
        raw_reserve(50000000, 0); ;; 0.05 TON
        send_raw_message(msg.end_cell(), 128); ;; return all non reserve balance
        return ();
    }
    if (op == 6) {
        ;; change fee
        int new_fee = in_msg_body~load_coins();
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, anycraft_public_key, new_fee);
        return();
    }
    if (op == 7) {
        ;; change public key
        int new_anycraft_public_key = in_msg_body~load_uint(256);
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, new_anycraft_public_key, fee);
        return();
    }
    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _, _, _, _) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _, _, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

(int, int, slice) royalty_params() method_id {
    var (_, _, _, _, royalty, _, _) = load_data();
    slice rs = royalty.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, content, _, _, _, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
        .store_uint(1, 8) ;; offchain tag
        .store_slice(common_content)
        .store_ref(individual_nft_content)
        .end_cell());
}

(int) get_mint_fee() method_id {
    var (_, _, _, _, _, _, fee) = load_data();
    return (fee);
}

(int) get_anycraft_public_key() method_id {
    var (_, _, _, _, _, anycraft_public_key, _) = load_data();
    return (anycraft_public_key);
}